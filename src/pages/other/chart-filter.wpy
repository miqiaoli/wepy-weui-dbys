<template>
<view class="container bg__white">
  <view class="choose-pro weui-flex">
    <view class="left">
      <scroll-view scroll-y style="height: 100vh;">
        <view class="items" wx:for="{{sheetNameList}}" wx:for-item="first" wx:key="*this" wx:for-index='idxI'>
          <view class="title">{{first.label}}</view>
          <block wx:for="{{first.children}}" wx:for-item="second" wx:key="*this" wx:for-index="idxJ">
            <view class="item {{(idxI == i && idxJ == j) ? 'active' : ''}}" bindtap="chooseThird" data-first-index='{{idxI}}' data-second-index='{{idxJ}}'>
              <view class="text">{{second.label}}</view>
            </view>
          </block>
        </view>
      </scroll-view>
    </view>
    <view class="right weui-flex__item">
      <view class="item" wx:for="{{thirdLevel}}" wx:key="*this" @tap="chooseOK" data-third-name="{{item.label}}"><text class="circle"></text>{{item.label}}</view>
    </view>
  </view>
</view>
</template>

<script>
import wepy from "wepy";
import {
  __getApi
} from "../../config.js";
import base from "../../mixins/base";
import http from "../../utils/Http";
import listStates from '../../components/listStates'
export default class ChartCompare extends wepy.page {
  mixins = [base]
  config = {
    navigationBarTitleText: "小八塑价对比",
  };
  data = {
    sheetNameList: [],
    sheetName: [],
    isFilter: true,
    thirdLevel: [],
    firstName: "",
    secondName: "",
    firstcompareName: "",
    i: 0,
    j: 0
  };
  methods = {
      chooseOK(e) {
        this.firstName = this.sheetNameList[this.i].label;
        this.secondName = this.sheetNameList[this.i].children[this.j].label + "/" + e.currentTarget.dataset.thirdName;
        this.sheetName = this.firstName + "/" + this.secondName;

        wepy.redirectTo({
          url: "./chart-compare?name1=" + encodeURIComponent(this.firstcompareName) + "&name2=" + encodeURIComponent(this.sheetName)
        });
      },
    chooseThird(e) {
      this.i = e.currentTarget.dataset.firstIndex
      this.j = e.currentTarget.dataset.secondIndex
      this.thirdLevel = this.sheetNameList[this.i].children[this.j].children
      this.$apply()
    }
  };
  async getSheetNames() {
    const res = await http.get(__getApi._getSameTypeNameList, {
      selectedName: this.firstcompareName
    });
    if (res.false) return;
    this.sheetNameList = res.data;
    this.thirdLevel = this.sheetNameList[0].children[0].children;

    // this.firstName = this.sheetNameList[0].label;
    // this.secondName = this.sheetNameList[this.type].children[0].label + "/" + this.sheetNameList[this.type].children[0].children[0].label;
    this.$apply();
  }
  async onLoad(options) {
    this.firstcompareName = decodeURIComponent(options.name) || this.firstcompareName;

    await this.getSheetNames();
    this.$apply();
  }

}
</script>

<style lang="less">
.left {
    width: 220rpx;
    text-align: center;
    border-right: 2rpx solid #E4E7F0;
    .title {
        font-size: 18px;
        color: #8F8E94;
        line-height: 80rpx;
        background: #F4F5F9;
    }
    .item {
        font-size: 16px;
        color: #3D3D3D;
        padding: 16rpx 0;
        .text {
            line-height: 48rpx;
        }
    }
    .item.active {
        background: #F9F9F9;
    }
    .item.active .text {
        border-left: 8rpx solid #323972;
    }
}
.right {
    padding: 0 30rpx;
    font-size: 16px;
    color: #3D3D3D;
    .item {
        padding: 20rpx 0;
        vertical-align: middle;
    }
    .circle {
        width: 10rpx;
        height: 10rpx;
        background: #323972;
        border-radius: 50%;
        margin-right: 10rpx;
        vertical-align: middle;
    }
}
</style>
